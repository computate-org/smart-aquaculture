apiVersion: v1
kind: ConfigMap
metadata:
  name: local-setup-tasks
  namespace: smartaquaculture
data:
  main.yaml: |
    ---

    - name: Configure keycloak realm
      community.general.keycloak_realm:
        validate_certs: false
        auth_client_id: admin-cli
        auth_keycloak_url: "{{ AUTH_URL }}"
        auth_realm: master
        auth_username: "{{ AUTH_ADMIN_USERNAME }}"
        auth_password: "{{ AUTH_ADMIN_PASSWORD }}"
        state: present
        id: "{{ AUTH_REALM }}"
        realm: "{{ AUTH_REALM }}"
        enabled: true
        displayName: "{{ AUTH_REALM }}"
        registrationAllowed: false
        resetPasswordAllowed: true
        editUsernameAllowed: false
        rememberMe: true
        verifyEmail: false
        loginWithEmailAllowed: false

    #- name: Configure authentication browser executions
    #  community.general.keycloak_authentication:
    #    validate_certs: false
    #    auth_keycloak_url: "{{ AUTH_URL }}"
    #    auth_realm: master
    #    auth_username: "{{ AUTH_ADMIN_USERNAME }}"
    #    auth_password: "{{ AUTH_ADMIN_PASSWORD }}"
    #    realm: "{{ AUTH_REALM }}"
    #    state: present
    #    force: true
    #    alias: "browser-PATCH"
    #    copyFrom: "browser"
    #    authenticationExecutions:
    #      - providerId: identity-provider-redirector
    #        requirement: REQUIRED
    #        index: 4
    #        authenticationConfig:
    #          alias: openshift
    #          config:
    #            defaultProvider: openshift
    #  ignore_errors: true

    #- name: Reconfigure keycloak realm with new browserFlow
    #  community.general.keycloak_realm:
    #    validate_certs: false
    #    auth_client_id: admin-cli
    #    auth_keycloak_url: "{{ AUTH_URL }}"
    #    auth_realm: master
    #    auth_username: "{{ AUTH_ADMIN_USERNAME }}"
    #    auth_password: "{{ AUTH_ADMIN_PASSWORD }}"
    #    state: present
    #    id: "{{ AUTH_REALM }}"
    #    realm: "{{ AUTH_REALM }}"
    #    enabled: true
    #    displayName: "{{ AUTH_REALM }}"
    #    registrationAllowed: false
    #    resetPasswordAllowed: true
    #    editUsernameAllowed: false
    #    rememberMe: true
    #    verifyEmail: false
    #    loginWithEmailAllowed: false
    #    browserFlow: browser-PATCH

    - name: "Configure keycloak client scope openid"
      community.general.keycloak_clientscope:
        validate_certs: false
        auth_client_id: admin-cli
        auth_keycloak_url: "{{ AUTH_URL }}"
        auth_realm: master
        auth_username: "{{ AUTH_ADMIN_USERNAME }}"
        auth_password: "{{ AUTH_ADMIN_PASSWORD }}"
        state: present
        id: "{{ AUTH_REALM }}-openid"
        realm: "{{ AUTH_REALM }}"
        name: "openid"
        description: A client scope for the openid client
        protocol: openid-connect
        attributes:
          include.in.token.scope: 'true'
        protocolMappers:
          - config:
              access.token.claim: 'true'
              introspection.token.claim: 'true'
            id: "{{ AUTH_REALM }}-openid-sub"
            name: "sub"
            protocol: openid-connect
            protocolMapper: oidc-sub-mapper

    - name: "Configure keycloak client scope {{ AUTH_CLIENT }}"
      community.general.keycloak_clientscope:
        validate_certs: false
        auth_client_id: admin-cli
        auth_keycloak_url: "{{ AUTH_URL }}"
        auth_realm: master
        auth_username: "{{ AUTH_ADMIN_USERNAME }}"
        auth_password: "{{ AUTH_ADMIN_PASSWORD }}"
        state: present
        id: "{{ AUTH_REALM }}-{{ AUTH_CLIENT }}"
        realm: "{{ AUTH_REALM }}"
        name: "{{ AUTH_CLIENT }}"
        description: A client scope for the {{ AUTH_CLIENT }} client
        protocol: openid-connect
        attributes:
          include.in.token.scope: 'true'
        protocolMappers:
          - config:
              access.token.claim: 'true'
              id.token.claim: 'false'
              included.client.audience: '{{ AUTH_CLIENT }}'
            id: "{{ AUTH_REALM }}-{{ AUTH_CLIENT }}"
            name: "{{ AUTH_CLIENT }}"
            protocol: openid-connect
            protocolMapper: oidc-audience-mapper
          - config:
              full.path: "true"
              introspection.token.claim: "true"
              userinfo.token.claim: "true"
              id.token.claim: "true"
              lightweight.claim: "false"
              access.token.claim: "true"
              claim.name: "groups"
            id: "{{ AUTH_REALM }}-{{ AUTH_CLIENT }}-groups"
            name: "groups"
            protocol: openid-connect
            protocolMapper: oidc-group-membership-mapper

    - name: "Disable RSA-OAEP key component from {{ AUTH_REALM }}"
      community.general.keycloak_component:
        validate_certs: false
        auth_client_id: admin-cli
        auth_keycloak_url: "{{ AUTH_URL }}"
        auth_realm: master
        auth_username: "{{ AUTH_ADMIN_USERNAME }}"
        auth_password: "{{ AUTH_ADMIN_PASSWORD }}"
        state: absent
        name: rsa-enc-generated
        parent_id: "{{ AUTH_REALM }}"
        provider_id: rsa-enc-generated
        provider_type: org.keycloak.keys.KeyProvider

    - name: "Configure OpenShift client {{ AUTH_CLIENT }}"
      community.general.keycloak_client:
        state: present
        validate_certs: false
        auth_client_id: admin-cli
        auth_keycloak_url: "{{ AUTH_URL }}"
        auth_realm: master
        auth_username: "{{ AUTH_ADMIN_USERNAME }}"
        auth_password: "{{ AUTH_ADMIN_PASSWORD }}"
        realm: "{{ AUTH_REALM }}"
        id: "{{ AUTH_CLIENT }}"
        name: "{{ AUTH_CLIENT }}"
        clientId: "{{ AUTH_CLIENT }}"
        standardFlowEnabled: true
        serviceAccountsEnabled: true
        authorizationServicesEnabled: true
        frontchannelLogout: true
        publicClient: false
        protocol: openid-connect
        redirectUris: "{{ lookup('template', 'keycloak-redirect-uris.yaml') | from_yaml }}"
        defaultClientScopes:
          - openid
          - profile
          - "{{ AUTH_CLIENT }}"
        authorizationSettings:
          decisionStrategy: AFFIRMATIVE

    #- name: Get keycloak OAuthClient resource info
    #  kubernetes.core.k8s_info:
    #    api_version: oauth.openshift.io/v1
    #    kind: OAuthClient
    #    name: keycloak
    #  register: keycloak_oauth_client
    #- name: "Install keycloak OAuthClient on OpenShift"
    #  kubernetes.core.k8s:
    #    state: present
    #    definition: "{{ lookup('template', 'oauthclient.yaml') }}"
    #    validate_certs: false
    #  when: keycloak_oauth_client.resources | length == 0
    #- name: Get keycloak OAuthClient resource info
    #  kubernetes.core.k8s_info:
    #    api_version: oauth.openshift.io/v1
    #    kind: OAuthClient
    #    name: keycloak
    #  register: keycloak_oauth_client_2
    #- name: Configure Keycloak OpenShift v4 identity provider
    #  community.general.keycloak_identity_provider:
    #    state: present
    #    validate_certs: false
    #    auth_client_id: admin-cli
    #    auth_keycloak_url: "{{ AUTH_URL }}"
    #    auth_realm: master
    #    auth_username: "{{ AUTH_ADMIN_USERNAME }}"
    #    auth_password: "{{ AUTH_ADMIN_PASSWORD }}"
    #    enabled: true
    #    realm: "{{ AUTH_REALM }}"
    #    providerId: openshift-v4
    #    alias: openshift
    #    displayName: OpenShift
    #    trustEmail: true
    #    storeToken: false
    #    addReadTokenRoleOnCreate: false
    #    authenticateByDefault: false
    #    linkOnly: false
    #    config:
    #      syncMode: "LEGACY"
    #      baseUrl: "https://api{{ OPENSHIFT_APPS_DOMAIN | regex_replace('^[^\\.]*') }}:6443"
    #      clientId: "keycloak"
    #      clientSecret: "{{ keycloak_oauth_client_2.resources[0].secret }}"

    - name: Get a new Keycloak client secret, passing client_id instead of id
      community.general.keycloak_clientsecret_info:
        validate_certs: false
        auth_client_id: admin-cli
        auth_keycloak_url: "{{ AUTH_URL }}"
        auth_realm: master
        auth_username: "{{ AUTH_ADMIN_USERNAME }}"
        auth_password: "{{ AUTH_ADMIN_PASSWORD }}"
        client_id: '{{ AUTH_CLIENT }}'
        realm: "{{ AUTH_REALM }}"
      register: AUTH_CLIENT_SECRET
    - name: Set AUTH_SECRET variable
      set_fact:
        AUTH_SECRET: "{{ AUTH_CLIENT_SECRET.clientsecret_info.value }}"

    - name: "Create a zookeeper secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'zookeeper-secret.yaml') }}"
        validate_certs: false
    - name: "Create a solr secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'solr-secret.yaml') }}"
        validate_certs: false
    - name: "Create a database secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'database-secret.yaml') }}"
        validate_certs: false
    - name: "Create a auth secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'auth-secret.yaml') }}"
        validate_certs: false
    - name: "Create a context-broker secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'context-broker-secret.yaml') }}"
        validate_certs: false
    - name: "Create a site secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'site-secret.yaml') }}"
        validate_certs: false
    - name: "Create a font-awesome secret in namespace {{ SITE_NAMESPACE }}"
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'font-awesome-secret.yaml') }}"
        validate_certs: false
      when: query('kubernetes.core.k8s', kind='Secret', resource_name=WEB_COMPONENTS_SECRET, namespace=SITE_NAMESPACE) | length == 0
